{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getData } from '../redux/actions/fetchData';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShowData = () => {\n  _s();\n\n  // get data\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getData());\n  }, [dispatch]); // update data everytime\n\n  useEffect(() => {\n    setInterval(function () {\n      dispatch(getData());\n    }, 1000);\n  }, []);\n  const {\n    data\n  } = useSelector(state => state.posts);\n  let totalCases = 0,\n      totalDeaths = 0,\n      totalRecovered = 0;\n  let dataSort = {};\n\n  if (data != null) {\n    // sort data\n    dataSort = data.sort((val1, val2) => val2.cases - val1.cases); // get index of VN\n\n    let indexVN = dataSort.findIndex(data => data.country === 'Vietnam'); // get element VN\n\n    let reindexVN = dataSort.splice(indexVN, 1); // reindex of VN\n\n    dataSort.unshift(reindexVN[0]); // arr has 10 element\n\n    dataSort.length = 10; // total\n\n    data.map(val => {\n      totalCases += val.cases;\n      totalDeaths += val.deaths;\n      totalRecovered += val.recovered;\n    });\n  } else {\n    console.log('Loading');\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(ShowData, \"ZFNhPK84Q468fOiFNOYkxqXo5A4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ShowData;\nexport default ShowData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowData\");","map":{"version":3,"sources":["E:/Tuanh/React Js/project_covid/src/components/ShowData.js"],"names":["React","useState","useEffect","useSelector","useDispatch","getData","ShowData","dispatch","setInterval","data","state","posts","totalCases","totalDeaths","totalRecovered","dataSort","sort","val1","val2","cases","indexVN","findIndex","country","reindexVN","splice","unshift","length","map","val","deaths","recovered","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,4BAAxB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB;AACA,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ,CAACF,OAAO,EAAR,CAAR;AACD,GAFQ,EAEN,CAACE,QAAD,CAFM,CAAT,CAHmB,CAOnB;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,WAAW,CAAC,YAAU;AACpBD,MAAAA,QAAQ,CAACF,OAAO,EAAR,CAAR;AACD,KAFU,EAER,IAFQ,CAAX;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAM;AAACI,IAAAA;AAAD,MAASN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAA1B;AACA,MAAIC,UAAU,GAAG,CAAjB;AAAA,MACIC,WAAW,GAAG,CADlB;AAAA,MAEIC,cAAc,GAAG,CAFrB;AAIA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIN,IAAI,IAAI,IAAZ,EAAkB;AACd;AACAM,IAAAA,QAAQ,GAAGN,IAAI,CAACO,IAAL,CAAU,CAACC,IAAD,EAAOC,IAAP,KAAgBA,IAAI,CAACC,KAAL,GAAWF,IAAI,CAACE,KAA1C,CAAX,CAFc,CAGd;;AACA,QAAIC,OAAO,GAAGL,QAAQ,CAACM,SAAT,CAAmBZ,IAAI,IAAIA,IAAI,CAACa,OAAL,KAAiB,SAA5C,CAAd,CAJc,CAKd;;AACA,QAAIC,SAAS,GAAGR,QAAQ,CAACS,MAAT,CAAgBJ,OAAhB,EAAyB,CAAzB,CAAhB,CANc,CAOd;;AACAL,IAAAA,QAAQ,CAACU,OAAT,CAAiBF,SAAS,CAAC,CAAD,CAA1B,EARc,CASd;;AACAR,IAAAA,QAAQ,CAACW,MAAT,GAAkB,EAAlB,CAVc,CAWd;;AACAjB,IAAAA,IAAI,CAACkB,GAAL,CAASC,GAAG,IAAI;AACZhB,MAAAA,UAAU,IAAEgB,GAAG,CAACT,KAAhB;AACAN,MAAAA,WAAW,IAAEe,GAAG,CAACC,MAAjB;AACAf,MAAAA,cAAc,IAAEc,GAAG,CAACE,SAApB;AACH,KAJD;AAKH,GAjBD,MAiBO;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH;;AAED,sBACI,qCADJ;AAKH,CA9CD;;GAAM1B,Q;UAEeF,W,EAYFD,W;;;KAdbG,Q;AAgDN,eAAeA,QAAf","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getData } from '../redux/actions/fetchData';\r\n\r\nconst ShowData = () => {\r\n    // get data\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n      dispatch(getData());\r\n    }, [dispatch]);\r\n\r\n    // update data everytime\r\n    useEffect(() => {\r\n        setInterval(function(){\r\n          dispatch(getData());\r\n        }, 1000);\r\n    }, []);\r\n\r\n    const {data} = useSelector((state) => state.posts);\r\n    let totalCases = 0,\r\n        totalDeaths = 0,\r\n        totalRecovered = 0;\r\n\r\n    let dataSort = {};\r\n    if (data != null) {\r\n        // sort data\r\n        dataSort = data.sort((val1, val2) => val2.cases-val1.cases);\r\n        // get index of VN\r\n        let indexVN = dataSort.findIndex(data => data.country === 'Vietnam');\r\n        // get element VN\r\n        let reindexVN = dataSort.splice(indexVN, 1);\r\n        // reindex of VN\r\n        dataSort.unshift(reindexVN[0]);\r\n        // arr has 10 element\r\n        dataSort.length = 10;\r\n        // total\r\n        data.map(val => {\r\n            totalCases+=val.cases;\r\n            totalDeaths+=val.deaths;\r\n            totalRecovered+=val.recovered;\r\n        })\r\n    } else {\r\n        console.log('Loading');\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShowData;"]},"metadata":{},"sourceType":"module"}